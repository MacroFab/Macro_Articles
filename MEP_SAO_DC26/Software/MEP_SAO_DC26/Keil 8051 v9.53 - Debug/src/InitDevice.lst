C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/30/2018 15:11:30 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\pdill\D
                    -ocuments\GitHub\Macro_Articles\MEP_SAO_DC26\Software\MEP_SAO_DC26\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LAR
                    -GE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\pdill\D
                    -ocuments\GitHub\Macro_Articles\MEP_SAO_DC26\Software\MEP_SAO_DC26\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/
                    -8051/v4.1.1//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8SB1/inc)
                    - PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              PCA_0_enter_DefaultMode_from_RESET();
  27   1              PCACH_2_enter_DefaultMode_from_RESET();
  28   1              PORTS_0_enter_DefaultMode_from_RESET();
  29   1              PORTS_1_enter_DefaultMode_from_RESET();
  30   1              PBCFG_0_enter_DefaultMode_from_RESET();
  31   1              CLOCK_0_enter_DefaultMode_from_RESET();
  32   1              TIMER01_0_enter_DefaultMode_from_RESET();
  33   1              TIMER16_2_enter_DefaultMode_from_RESET();
  34   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  35   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  36   1              // Restore the SFRPAGE
  37   1              SFRPAGE = SFRPAGE_save;
  38   1              // [Config Calls]$
  39   1      
  40   1      }
  41          
  42          //================================================================================
  43          // PCA_0_enter_DefaultMode_from_RESET
  44          //================================================================================
  45          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  46   1              // $[PCA0MD - PCA Mode]
  47   1              /***********************************************************************
  48   1               - Disable Watchdog Timer
  49   1               - System clock divided by 12
  50   1               - PCA continues to function normally while the system controller is in
  51   1               Idle Mode
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/30/2018 15:11:30 PAGE 2   

  52   1               - Disable the CF interrupt
  53   1               - Disable Watchdog Timer
  54   1               - Watchdog Timer Enable unlocked
  55   1               ***********************************************************************/
  56   1              SFRPAGE = 0x00;
  57   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  58   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL
  59   1                              | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_WDTE__DISABLED
  60   1                              | PCA0MD_WDLCK__UNLOCKED;
  61   1              // [PCA0MD - PCA Mode]$
  62   1      
  63   1              // $[PCA0H - PCA Counter/Timer High Byte]
  64   1              // [PCA0H - PCA Counter/Timer High Byte]$
  65   1      
  66   1              // $[PCA0L - PCA Counter/Timer Low Byte]
  67   1              // [PCA0L - PCA Counter/Timer Low Byte]$
  68   1      
  69   1              // $[PCA0PWM - PCA PWM Configuration]
  70   1              // [PCA0PWM - PCA PWM Configuration]$
  71   1      
  72   1              // $[PCA0CN0 - PCA Control 0]
  73   1              // [PCA0CN0 - PCA Control 0]$
  74   1      
  75   1      }
  76          
  77          //================================================================================
  78          // PCACH_2_enter_DefaultMode_from_RESET
  79          //================================================================================
  80          extern void PCACH_2_enter_DefaultMode_from_RESET(void) {
  81   1              // $[PCA0 Settings Save]
  82   1              // Select Capture/Compare register)
  83   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
  84   1              // [PCA0 Settings Save]$
  85   1      
  86   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
  87   1              /***********************************************************************
  88   1               - Disable negative edge capture
  89   1               - Disable CCF2 interrupts
  90   1               - Enable match function
  91   1               - 8 to 11-bit PWM selected
  92   1               - Disable positive edge capture
  93   1               - Disable comparator function
  94   1               - Disable PWM function
  95   1               - Disable toggle function
  96   1               ***********************************************************************/
  97   1              PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED
  98   1                              | PCA0CPM2_MAT__ENABLED | PCA0CPM2_PWM16__8_BIT
  99   1                              | PCA0CPM2_CAPP__DISABLED | PCA0CPM2_ECOM__DISABLED
 100   1                              | PCA0CPM2_PWM__DISABLED | PCA0CPM2_TOG__DISABLED;
 101   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
 102   1      
 103   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 104   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 105   1      
 106   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 107   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 108   1      
 109   1              // $[Auto-reload]
 110   1              // [Auto-reload]$
 111   1      
 112   1              // $[PCA0 Settings Restore]
 113   1              // [PCA0 Settings Restore]$
 114   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/30/2018 15:11:30 PAGE 3   

 115   1      }
 116          
 117          //================================================================================
 118          // PORTS_0_enter_DefaultMode_from_RESET
 119          //================================================================================
 120          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 121   1              // $[P0 - Port 0 Pin Latch]
 122   1              /***********************************************************************
 123   1               - P0.0 is low. Set P0.0 to drive low
 124   1               - P0.1 is low. Set P0.1 to drive low
 125   1               - P0.2 is low. Set P0.2 to drive low
 126   1               - P0.3 is low. Set P0.3 to drive low
 127   1               - P0.4 is low. Set P0.4 to drive low
 128   1               - P0.5 is low. Set P0.5 to drive low
 129   1               - P0.6 is low. Set P0.6 to drive low
 130   1               - P0.7 is low. Set P0.7 to drive low
 131   1               ***********************************************************************/
 132   1              P0 = P0_B0__LOW | P0_B1__LOW | P0_B2__LOW | P0_B3__LOW | P0_B4__LOW
 133   1                              | P0_B5__LOW | P0_B6__LOW | P0_B7__LOW;
 134   1              // [P0 - Port 0 Pin Latch]$
 135   1      
 136   1              // $[P0MDOUT - Port 0 Output Mode]
 137   1              /***********************************************************************
 138   1               - P0.0 output is push-pull
 139   1               - P0.1 output is push-pull
 140   1               - P0.2 output is push-pull
 141   1               - P0.3 output is push-pull
 142   1               - P0.4 output is push-pull
 143   1               - P0.5 output is push-pull
 144   1               - P0.6 output is push-pull
 145   1               - P0.7 output is push-pull
 146   1               ***********************************************************************/
 147   1              P0MDOUT = P0MDOUT_B0__PUSH_PULL | P0MDOUT_B1__PUSH_PULL
 148   1                              | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__PUSH_PULL
 149   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__PUSH_PULL
 150   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__PUSH_PULL;
 151   1              // [P0MDOUT - Port 0 Output Mode]$
 152   1      
 153   1              // $[P0MDIN - Port 0 Input Mode]
 154   1              // [P0MDIN - Port 0 Input Mode]$
 155   1      
 156   1              // $[P0SKIP - Port 0 Skip]
 157   1              // [P0SKIP - Port 0 Skip]$
 158   1      
 159   1              // $[P0MASK - Port 0 Mask]
 160   1              // [P0MASK - Port 0 Mask]$
 161   1      
 162   1              // $[P0MAT - Port 0 Match]
 163   1              // [P0MAT - Port 0 Match]$
 164   1      
 165   1              // $[P0DRV - Port 0 Drive Strength]
 166   1              /***********************************************************************
 167   1               - P0.0 output has high output drive strength
 168   1               - P0.1 output has high output drive strength
 169   1               - P0.2 output has high output drive strength
 170   1               - P0.3 output has high output drive strength
 171   1               - P0.4 output has high output drive strength
 172   1               - P0.5 output has high output drive strength
 173   1               - P0.6 output has high output drive strength
 174   1               - P0.7 output has high output drive strength
 175   1               ***********************************************************************/
 176   1              SFRPAGE = 0x0F;
 177   1              P0DRV = P0DRV_B0__HIGH_DRIVE | P0DRV_B1__HIGH_DRIVE | P0DRV_B2__HIGH_DRIVE
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/30/2018 15:11:30 PAGE 4   

 178   1                              | P0DRV_B3__HIGH_DRIVE | P0DRV_B4__HIGH_DRIVE | P0DRV_B5__HIGH_DRIVE
 179   1                              | P0DRV_B6__HIGH_DRIVE | P0DRV_B7__HIGH_DRIVE;
 180   1              // [P0DRV - Port 0 Drive Strength]$
 181   1      
 182   1      }
 183          
 184          //================================================================================
 185          // PORTS_1_enter_DefaultMode_from_RESET
 186          //================================================================================
 187          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 188   1              // $[Missing Pin Skip]
 189   1              // Skip any pins that are not available on this package
 190   1              P1SKIP |= P1SKIP_B4__SKIPPED;
 191   1              // [Missing Pin Skip]$
 192   1      
 193   1              // $[P1 - Port 1 Pin Latch]
 194   1              /***********************************************************************
 195   1               - P1.0 is low. Set P1.0 to drive low
 196   1               - P1.1 is low. Set P1.1 to drive low
 197   1               - P1.2 is low. Set P1.2 to drive low
 198   1               - P1.3 is low. Set P1.3 to drive low
 199   1               - P1.5 is low. Set P1.5 to drive low
 200   1               - P1.6 is high. Set P1.6 to drive or float high
 201   1               - P1.7 is high. Set P1.7 to drive or float high
 202   1               ***********************************************************************/
 203   1              SFRPAGE = 0x00;
 204   1              P1 = P1_B0__LOW | P1_B1__LOW | P1_B2__LOW | P1_B3__LOW | P1_B5__LOW
 205   1                              | P1_B6__HIGH | P1_B7__HIGH;
 206   1              // [P1 - Port 1 Pin Latch]$
 207   1      
 208   1              // $[P1MDOUT - Port 1 Output Mode]
 209   1              /***********************************************************************
 210   1               - P1.0 output is push-pull
 211   1               - P1.1 output is push-pull
 212   1               - P1.2 output is push-pull
 213   1               - P1.3 output is push-pull
 214   1               - P1.5 output is push-pull
 215   1               - P1.6 output is push-pull
 216   1               - P1.7 output is push-pull
 217   1               ***********************************************************************/
 218   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__PUSH_PULL
 219   1                              | P1MDOUT_B2__PUSH_PULL | P1MDOUT_B3__PUSH_PULL
 220   1                              | P1MDOUT_B5__PUSH_PULL | P1MDOUT_B6__PUSH_PULL
 221   1                              | P1MDOUT_B7__PUSH_PULL;
 222   1              // [P1MDOUT - Port 1 Output Mode]$
 223   1      
 224   1              // $[P1MDIN - Port 1 Input Mode]
 225   1              // [P1MDIN - Port 1 Input Mode]$
 226   1      
 227   1              // $[P1SKIP - Port 1 Skip]
 228   1              // [P1SKIP - Port 1 Skip]$
 229   1      
 230   1              // $[P1MASK - Port 1 Mask]
 231   1              // [P1MASK - Port 1 Mask]$
 232   1      
 233   1              // $[P1MAT - Port 1 Match]
 234   1              // [P1MAT - Port 1 Match]$
 235   1      
 236   1              // $[P1DRV - Port 1 Drive Strength]
 237   1              /***********************************************************************
 238   1               - P1.0 output has high output drive strength
 239   1               - P1.1 output has high output drive strength
 240   1               - P1.2 output has high output drive strength
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/30/2018 15:11:30 PAGE 5   

 241   1               - P1.3 output has high output drive strength
 242   1               - P1.5 output has high output drive strength
 243   1               - P1.6 output has high output drive strength
 244   1               - P1.7 output has high output drive strength
 245   1               ***********************************************************************/
 246   1              SFRPAGE = 0x0F;
 247   1              P1DRV = P1DRV_B0__HIGH_DRIVE | P1DRV_B1__HIGH_DRIVE | P1DRV_B2__HIGH_DRIVE
 248   1                              | P1DRV_B3__HIGH_DRIVE | P1DRV_B5__HIGH_DRIVE | P1DRV_B6__HIGH_DRIVE
 249   1                              | P1DRV_B7__HIGH_DRIVE;
 250   1              // [P1DRV - Port 1 Drive Strength]$
 251   1      
 252   1      }
 253          
 254          //================================================================================
 255          // PBCFG_0_enter_DefaultMode_from_RESET
 256          //================================================================================
 257          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 258   1              // $[XBR2 - Port I/O Crossbar 2]
 259   1              /***********************************************************************
 260   1               - Weak Pullups enabled 
 261   1               - Crossbar enabled
 262   1               ***********************************************************************/
 263   1              SFRPAGE = 0x00;
 264   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 265   1              // [XBR2 - Port I/O Crossbar 2]$
 266   1      
 267   1              // $[XBR0 - Port I/O Crossbar 0]
 268   1              // [XBR0 - Port I/O Crossbar 0]$
 269   1      
 270   1              // $[XBR1 - Port I/O Crossbar 1]
 271   1              // [XBR1 - Port I/O Crossbar 1]$
 272   1      
 273   1      }
 274          
 275          //================================================================================
 276          // RTC_0_enter_DefaultMode_from_RESET
 277          //================================================================================
 278          extern void RTC_0_enter_DefaultMode_from_RESET(void) {
 279   1      
 280   1              // $[RTC Initialization]
 281   1              // [RTC Initialization]$
 282   1      
 283   1              // $[RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]
 284   1              // [RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]$
 285   1      
 286   1              // $[RTC0XCN - RTC Oscillator Control]
 287   1              /***********************************************************************
 288   1               - Self-Oscillate Mode selected
 289   1               - Disable AGC
 290   1               - Enable the Bias Double feature
 291   1               - LFOSC0 enabled and selected as RTC oscillator source
 292   1               ***********************************************************************/
 293   1              RTC0ADR = RTC0XCN0;
 294   1              RTC0DAT = RTC0XCN0_XMODE__SELF_OSCILLATE | RTC0XCN0_AGCEN__DISABLED
 295   1                              | RTC0XCN0_BIASX2__ENABLED | RTC0XCN0_LFOEN__ENABLED;
 296   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 297   1                      ;    //Poll Busy Bit
 298   1              // [RTC0XCN - RTC Oscillator Control]$
 299   1      
 300   1              // $[RTC0XCF - RTC Oscillator Configuration]
 301   1              // [RTC0XCF - RTC Oscillator Configuration]$
 302   1      
 303   1              // $[CAPTURE0 - RTC Timer Capture 0]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/30/2018 15:11:30 PAGE 6   

 304   1              // [CAPTURE0 - RTC Timer Capture 0]$
 305   1      
 306   1              // $[CAPTURE1 - RTC Timer Capture 1]
 307   1              // [CAPTURE1 - RTC Timer Capture 1]$
 308   1      
 309   1              // $[CAPTURE2 - RTC Timer Capture 2]
 310   1              // [CAPTURE2 - RTC Timer Capture 2]$
 311   1      
 312   1              // $[CAPTURE3 - RTC Timer Capture 3]
 313   1              // [CAPTURE3 - RTC Timer Capture 3]$
 314   1      
 315   1              // $[ALARM0 - RTC Alarm Programmed Value 0]
 316   1              /***********************************************************************
 317   1               - RTC Alarm Programmed Value 0 = 0x20
 318   1               ***********************************************************************/
 319   1              RTC0ADR = ALARM0;
 320   1              RTC0DAT = (0x20 << ALARM0_ALARM0__SHIFT);
 321   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 322   1                      ;    //Poll Busy Bit
 323   1              // [ALARM0 - RTC Alarm Programmed Value 0]$
 324   1      
 325   1              // $[ALARM1 - RTC Alarm Programmed Value 1]
 326   1              // [ALARM1 - RTC Alarm Programmed Value 1]$
 327   1      
 328   1              // $[ALARM2 - RTC Alarm Programmed Value 2]
 329   1              // [ALARM2 - RTC Alarm Programmed Value 2]$
 330   1      
 331   1              // $[ALARM3 - RTC Alarm Programmed Value 3]
 332   1              // [ALARM3 - RTC Alarm Programmed Value 3]$
 333   1      
 334   1              // $[RTC0CN - RTC Control]
 335   1              /***********************************************************************
 336   1               - Enable RTC oscillator
 337   1               - RTC timer is running
 338   1               - Disable missing RTC detector
 339   1               - Enable RTC alarm
 340   1               - Alarm event flag is set or enable the auto reset function
 341   1               - Do not start a capture operation
 342   1               - Do not start a set operation
 343   1               ***********************************************************************/
 344   1              RTC0ADR = RTC0CN0;
 345   1              RTC0DAT = RTC0CN0_RTC0EN__ENABLED | RTC0CN0_RTC0TR__RUN
 346   1                              | RTC0CN0_MCLKEN__DISABLED | RTC0CN0_RTC0AEN__ENABLED
 347   1                              | RTC0CN0_ALRM__SET | RTC0CN0_RTC0CAP__NOT_SET
 348   1                              | RTC0CN0_RTC0SET__NOT_SET;
 349   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 350   1                      ;    //Poll Busy Bit
 351   1      
 352   1              // [RTC0CN - RTC Control]$
 353   1      
 354   1              // $[External Oscillator Setup]
 355   1              // [External Oscillator Setup]$
 356   1      
 357   1      }
 358          
 359          //================================================================================
 360          // CLOCK_0_enter_DefaultMode_from_RESET
 361          //================================================================================
 362          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 363   1      
 364   1              // $[CLKSEL - Clock Select]
 365   1              /***********************************************************************
 366   1               - SYSCLK is equal to selected clock source divided by 1
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/30/2018 15:11:30 PAGE 7   

 367   1               - Clock derived from the Internal Low Power Oscillator
 368   1               ***********************************************************************/
 369   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__LPOSC;
 370   1              // Wait for the clock to be ready
 371   1              while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 372   1                      ;
 373   1              // [CLKSEL - Clock Select]$
 374   1      
 375   1      }
 376          
 377          extern void PMU_0_enter_DefaultMode_from_RESET(void) {
 378   1      
 379   1      }
 380          
 381          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 382   1              // $[CKCON0 - Clock Control 0]
 383   1              /***********************************************************************
 384   1               - System clock divided by 12
 385   1               - Counter/Timer 0 uses the system clock
 386   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 387   1               - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 388   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 389   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 390   1               - Timer 1 uses the clock defined by the prescale field, SCA
 391   1               ***********************************************************************/
 392   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__SYSCLK
 393   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 394   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 395   1                              | CKCON0_T1M__PRESCALE;
 396   1              // [CKCON0 - Clock Control 0]$
 397   1      
 398   1              // $[TMOD - Timer 0/1 Mode]
 399   1              /***********************************************************************
 400   1               - Mode 1, 16-bit Counter/Timer
 401   1               - Mode 0, 13-bit Counter/Timer
 402   1               - Timer Mode
 403   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 404   1               - Timer Mode
 405   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 406   1               ***********************************************************************/
 407   1              TMOD = TMOD_T0M__MODE1 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 408   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 409   1              // [TMOD - Timer 0/1 Mode]$
 410   1      
 411   1              // $[TCON - Timer 0/1 Control]
 412   1              /***********************************************************************
 413   1               - Start Timer 0 running
 414   1               ***********************************************************************/
 415   1              TCON |= TCON_TR0__RUN;
 416   1              // [TCON - Timer 0/1 Control]$
 417   1      
 418   1      }
 419          
 420          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 421   1              // $[EIE1 - Extended Interrupt Enable 1]
 422   1              // [EIE1 - Extended Interrupt Enable 1]$
 423   1      
 424   1              // $[EIP1 - Extended Interrupt Priority 1]
 425   1              // [EIP1 - Extended Interrupt Priority 1]$
 426   1      
 427   1              // $[IE - Interrupt Enable]
 428   1              /***********************************************************************
 429   1               - Enable each interrupt according to its individual mask setting
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/30/2018 15:11:30 PAGE 8   

 430   1               - Disable external interrupt 0
 431   1               - Disable external interrupt 1
 432   1               - Disable all SPI0 interrupts
 433   1               - Enable interrupt requests generated by the TF0 flag
 434   1               - Disable all Timer 1 interrupt
 435   1               - Disable Timer 2 interrupt
 436   1               - Disable UART0 interrupt
 437   1               ***********************************************************************/
 438   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 439   1                              | IE_ESPI0__DISABLED | IE_ET0__ENABLED | IE_ET1__DISABLED
 440   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 441   1              // [IE - Interrupt Enable]$
 442   1      
 443   1              // $[IP - Interrupt Priority]
 444   1              // [IP - Interrupt Priority]$
 445   1      
 446   1              // $[EIE2 - Extended Interrupt Enable 2]
 447   1              // [EIE2 - Extended Interrupt Enable 2]$
 448   1      
 449   1              // $[EIP2 - Extended Interrupt Priority 2]
 450   1              // [EIP2 - Extended Interrupt Priority 2]$
 451   1      
 452   1      }
 453          
 454          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 455   1              // $[Timer Initialization]
 456   1              //Save Timer Configuration
 457   1              uint8_t TCON_save;
 458   1              TCON_save = TCON;
 459   1              //Stop Timers
 460   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 461   1      
 462   1              // [Timer Initialization]$
 463   1      
 464   1              // $[TH0 - Timer 0 High Byte]
 465   1              /***********************************************************************
 466   1               - Timer 0 High Byte = 0xB1
 467   1               ***********************************************************************/
 468   1              TH0 = (0xB1 << TH0_TH0__SHIFT);
 469   1              // [TH0 - Timer 0 High Byte]$
 470   1      
 471   1              // $[TL0 - Timer 0 Low Byte]
 472   1              /***********************************************************************
 473   1               - Timer 0 Low Byte = 0xDA
 474   1               ***********************************************************************/
 475   1              TL0 = (0xDA << TL0_TL0__SHIFT);
 476   1              // [TL0 - Timer 0 Low Byte]$
 477   1      
 478   1              // $[TH1 - Timer 1 High Byte]
 479   1              // [TH1 - Timer 1 High Byte]$
 480   1      
 481   1              // $[TL1 - Timer 1 Low Byte]
 482   1              // [TL1 - Timer 1 Low Byte]$
 483   1      
 484   1              // $[Timer Restoration]
 485   1              //Restore Timer Configuration
 486   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 487   1      
 488   1              // [Timer Restoration]$
 489   1      
 490   1      }
 491          
 492          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/30/2018 15:11:30 PAGE 9   

 493   1              // $[Timer Initialization]
 494   1              // Save Timer Configuration
 495   1              uint8_t TMR2CN0_TR2_save;
 496   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 497   1              // Stop Timer
 498   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 499   1              // [Timer Initialization]$
 500   1      
 501   1              // $[TMR2CN0 - Timer 2 Control]
 502   1              // [TMR2CN0 - Timer 2 Control]$
 503   1      
 504   1              // $[TMR2H - Timer 2 High Byte]
 505   1              // [TMR2H - Timer 2 High Byte]$
 506   1      
 507   1              // $[TMR2L - Timer 2 Low Byte]
 508   1              // [TMR2L - Timer 2 Low Byte]$
 509   1      
 510   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 511   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 512   1      
 513   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 514   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 515   1      
 516   1              // $[TMR2CN0]
 517   1              // [TMR2CN0]$
 518   1      
 519   1              // $[Timer Restoration]
 520   1              // Restore Timer Configuration
 521   1              TMR2CN0 |= TMR2CN0_TR2_save;
 522   1              // [Timer Restoration]$
 523   1      
 524   1      }
 525          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    182    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
