C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/17/2017 13:29:23 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Parker\
                    -SimplicityStudio\MF_workspace\MF_Blink\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFU
                    -ZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v4/develope
                    -r/sdks/8051/v4.0.4//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8B
                    -B1/inc;C:\Users\Parker\SimplicityStudio\MF_workspace\MF_Blink\inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGEL
                    -ENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              WDT_0_enter_DefaultMode_from_RESET();
  25   1              PORTS_1_enter_DefaultMode_from_RESET();
  26   1              PBCFG_0_enter_DefaultMode_from_RESET();
  27   1              TIMER16_2_enter_DefaultMode_from_RESET();
  28   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  29   1              // [Config Calls]$
  30   1      
  31   1      }
  32          
  33          //================================================================================
  34          // WDT_0_enter_DefaultMode_from_RESET
  35          //================================================================================
  36          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  37   1              // $[WDTCN - Watchdog Timer Control]
  38   1              //Disable Watchdog with key sequence
  39   1              WDTCN = 0xDE; //First key
  40   1              WDTCN = 0xAD; //Second key
  41   1              // [WDTCN - Watchdog Timer Control]$
  42   1      
  43   1      }
  44          
  45          //================================================================================
  46          // PORTS_1_enter_DefaultMode_from_RESET
  47          //================================================================================
  48          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
  49   1              // $[P1 - Port 1 Pin Latch]
  50   1              // [P1 - Port 1 Pin Latch]$
  51   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/17/2017 13:29:23 PAGE 2   

  52   1              // $[P1MDOUT - Port 1 Output Mode]
  53   1              /***********************************************************************
  54   1               - P1.0 output is push-pull
  55   1               - P1.1 output is open-drain
  56   1               - P1.2 output is open-drain
  57   1               - P1.3 output is open-drain
  58   1               - P1.4 output is open-drain
  59   1               - P1.5 output is open-drain
  60   1               - P1.6 output is open-drain
  61   1               ***********************************************************************/
  62   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
  63   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
  64   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
  65   1                              | P1MDOUT_B6__OPEN_DRAIN;
  66   1              // [P1MDOUT - Port 1 Output Mode]$
  67   1      
  68   1              // $[P1MDIN - Port 1 Input Mode]
  69   1              // [P1MDIN - Port 1 Input Mode]$
  70   1      
  71   1              // $[P1SKIP - Port 1 Skip]
  72   1              // [P1SKIP - Port 1 Skip]$
  73   1      
  74   1              // $[P1MASK - Port 1 Mask]
  75   1              // [P1MASK - Port 1 Mask]$
  76   1      
  77   1              // $[P1MAT - Port 1 Match]
  78   1              // [P1MAT - Port 1 Match]$
  79   1      
  80   1      }
  81          
  82          //================================================================================
  83          // PBCFG_0_enter_DefaultMode_from_RESET
  84          //================================================================================
  85          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
  86   1              // $[XBR2 - Port I/O Crossbar 2]
  87   1              /***********************************************************************
  88   1               - Weak Pullups enabled 
  89   1               - Crossbar enabled
  90   1               ***********************************************************************/
  91   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
  92   1              // [XBR2 - Port I/O Crossbar 2]$
  93   1      
  94   1              // $[PRTDRV - Port Drive Strength]
  95   1              // [PRTDRV - Port Drive Strength]$
  96   1      
  97   1              // $[XBR0 - Port I/O Crossbar 0]
  98   1              // [XBR0 - Port I/O Crossbar 0]$
  99   1      
 100   1              // $[XBR1 - Port I/O Crossbar 1]
 101   1              // [XBR1 - Port I/O Crossbar 1]$
 102   1      
 103   1      }
 104          
 105          //================================================================================
 106          // TIMER16_2_enter_DefaultMode_from_RESET
 107          //================================================================================
 108          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 109   1              // $[Timer Initialization]
 110   1              // Save Timer Configuration
 111   1              uint8_t TMR2CN0_TR2_save;
 112   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 113   1              // Stop Timer
 114   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/17/2017 13:29:23 PAGE 3   

 115   1              // [Timer Initialization]$
 116   1      
 117   1              // $[TMR2CN0 - Timer 2 Control]
 118   1              // [TMR2CN0 - Timer 2 Control]$
 119   1      
 120   1              // $[TMR2H - Timer 2 High Byte]
 121   1              // [TMR2H - Timer 2 High Byte]$
 122   1      
 123   1              // $[TMR2L - Timer 2 Low Byte]
 124   1              // [TMR2L - Timer 2 Low Byte]$
 125   1      
 126   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 127   1              /***********************************************************************
 128   1               - Timer 2 Reload High Byte = 0x9C
 129   1               ***********************************************************************/
 130   1              TMR2RLH = (0x9C << TMR2RLH_TMR2RLH__SHIFT);
 131   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 132   1      
 133   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 134   1              /***********************************************************************
 135   1               - Timer 2 Reload Low Byte = 0x4F
 136   1               ***********************************************************************/
 137   1              TMR2RLL = (0x4F << TMR2RLL_TMR2RLL__SHIFT);
 138   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 139   1      
 140   1              // $[TMR2CN0]
 141   1              /***********************************************************************
 142   1               - Start Timer 2 running
 143   1               ***********************************************************************/
 144   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 145   1              // [TMR2CN0]$
 146   1      
 147   1              // $[Timer Restoration]
 148   1              // Restore Timer Configuration
 149   1              TMR2CN0 |= TMR2CN0_TR2_save;
 150   1              // [Timer Restoration]$
 151   1      
 152   1      }
 153          
 154          //================================================================================
 155          // INTERRUPT_0_enter_DefaultMode_from_RESET
 156          //================================================================================
 157          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 158   1              // $[EIE1 - Extended Interrupt Enable 1]
 159   1              // [EIE1 - Extended Interrupt Enable 1]$
 160   1      
 161   1              // $[EIP1 - Extended Interrupt Priority 1]
 162   1              // [EIP1 - Extended Interrupt Priority 1]$
 163   1      
 164   1              // $[IE - Interrupt Enable]
 165   1              /***********************************************************************
 166   1               - Enable each interrupt according to its individual mask setting
 167   1               - Disable external interrupt 0
 168   1               - Disable external interrupt 1
 169   1               - Disable all SPI0 interrupts
 170   1               - Disable all Timer 0 interrupt
 171   1               - Disable all Timer 1 interrupt
 172   1               - Enable interrupt requests generated by the TF2L or TF2H flags
 173   1               - Disable UART0 interrupt
 174   1               ***********************************************************************/
 175   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 176   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 177   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/17/2017 13:29:23 PAGE 4   

 178   1              // [IE - Interrupt Enable]$
 179   1      
 180   1              // $[IP - Interrupt Priority]
 181   1              // [IP - Interrupt Priority]$
 182   1      
 183   1      }
 184          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     53    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
